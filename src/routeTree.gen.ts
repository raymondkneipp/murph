/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as UsernameRouteImport } from './routes/$username'
import { Route as AppRouteRouteImport } from './routes/app/route'
import { Route as MarketingRouteRouteImport } from './routes/_marketing/route'
import { Route as AuthRouteRouteImport } from './routes/_auth/route'
import { Route as MarketingIndexRouteImport } from './routes/_marketing/index'
import { Route as AppSettingsRouteImport } from './routes/app/settings'
import { Route as AppNewRouteImport } from './routes/app/new'
import { Route as AppMeRouteImport } from './routes/app/me'
import { Route as AppLeaderboardRouteImport } from './routes/app/leaderboard'
import { Route as AppFeedRouteImport } from './routes/app/feed'
import { Route as MarketingLeaderboardRouteImport } from './routes/_marketing/leaderboard'
import { Route as AuthSignupRouteImport } from './routes/_auth/signup'
import { Route as AuthLoginRouteImport } from './routes/_auth/login'
import { ServerRoute as ApiAuthSplatServerRouteImport } from './routes/api/auth/$'

const rootServerRouteImport = createServerRootRoute()

const UsernameRoute = UsernameRouteImport.update({
  id: '/$username',
  path: '/$username',
  getParentRoute: () => rootRouteImport,
} as any)
const AppRouteRoute = AppRouteRouteImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => rootRouteImport,
} as any)
const MarketingRouteRoute = MarketingRouteRouteImport.update({
  id: '/_marketing',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRouteRoute = AuthRouteRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const MarketingIndexRoute = MarketingIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => MarketingRouteRoute,
} as any)
const AppSettingsRoute = AppSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppNewRoute = AppNewRouteImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppMeRoute = AppMeRouteImport.update({
  id: '/me',
  path: '/me',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppLeaderboardRoute = AppLeaderboardRouteImport.update({
  id: '/leaderboard',
  path: '/leaderboard',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppFeedRoute = AppFeedRouteImport.update({
  id: '/feed',
  path: '/feed',
  getParentRoute: () => AppRouteRoute,
} as any)
const MarketingLeaderboardRoute = MarketingLeaderboardRouteImport.update({
  id: '/leaderboard',
  path: '/leaderboard',
  getParentRoute: () => MarketingRouteRoute,
} as any)
const AuthSignupRoute = AuthSignupRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthRouteRoute,
} as any)
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/app': typeof AppRouteRouteWithChildren
  '/$username': typeof UsernameRoute
  '/login': typeof AuthLoginRoute
  '/signup': typeof AuthSignupRoute
  '/leaderboard': typeof MarketingLeaderboardRoute
  '/app/feed': typeof AppFeedRoute
  '/app/leaderboard': typeof AppLeaderboardRoute
  '/app/me': typeof AppMeRoute
  '/app/new': typeof AppNewRoute
  '/app/settings': typeof AppSettingsRoute
  '/': typeof MarketingIndexRoute
}
export interface FileRoutesByTo {
  '/app': typeof AppRouteRouteWithChildren
  '/$username': typeof UsernameRoute
  '/login': typeof AuthLoginRoute
  '/signup': typeof AuthSignupRoute
  '/leaderboard': typeof MarketingLeaderboardRoute
  '/app/feed': typeof AppFeedRoute
  '/app/leaderboard': typeof AppLeaderboardRoute
  '/app/me': typeof AppMeRoute
  '/app/new': typeof AppNewRoute
  '/app/settings': typeof AppSettingsRoute
  '/': typeof MarketingIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_auth': typeof AuthRouteRouteWithChildren
  '/_marketing': typeof MarketingRouteRouteWithChildren
  '/app': typeof AppRouteRouteWithChildren
  '/$username': typeof UsernameRoute
  '/_auth/login': typeof AuthLoginRoute
  '/_auth/signup': typeof AuthSignupRoute
  '/_marketing/leaderboard': typeof MarketingLeaderboardRoute
  '/app/feed': typeof AppFeedRoute
  '/app/leaderboard': typeof AppLeaderboardRoute
  '/app/me': typeof AppMeRoute
  '/app/new': typeof AppNewRoute
  '/app/settings': typeof AppSettingsRoute
  '/_marketing/': typeof MarketingIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/app'
    | '/$username'
    | '/login'
    | '/signup'
    | '/leaderboard'
    | '/app/feed'
    | '/app/leaderboard'
    | '/app/me'
    | '/app/new'
    | '/app/settings'
    | '/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/app'
    | '/$username'
    | '/login'
    | '/signup'
    | '/leaderboard'
    | '/app/feed'
    | '/app/leaderboard'
    | '/app/me'
    | '/app/new'
    | '/app/settings'
    | '/'
  id:
    | '__root__'
    | '/_auth'
    | '/_marketing'
    | '/app'
    | '/$username'
    | '/_auth/login'
    | '/_auth/signup'
    | '/_marketing/leaderboard'
    | '/app/feed'
    | '/app/leaderboard'
    | '/app/me'
    | '/app/new'
    | '/app/settings'
    | '/_marketing/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
  MarketingRouteRoute: typeof MarketingRouteRouteWithChildren
  AppRouteRoute: typeof AppRouteRouteWithChildren
  UsernameRoute: typeof UsernameRoute
}
export interface FileServerRoutesByFullPath {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRoutesByTo {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/auth/$'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/auth/$'
  id: '__root__' | '/api/auth/$'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/$username': {
      id: '/$username'
      path: '/$username'
      fullPath: '/$username'
      preLoaderRoute: typeof UsernameRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/app': {
      id: '/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_marketing': {
      id: '/_marketing'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof MarketingRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_marketing/': {
      id: '/_marketing/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof MarketingIndexRouteImport
      parentRoute: typeof MarketingRouteRoute
    }
    '/app/settings': {
      id: '/app/settings'
      path: '/settings'
      fullPath: '/app/settings'
      preLoaderRoute: typeof AppSettingsRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/app/new': {
      id: '/app/new'
      path: '/new'
      fullPath: '/app/new'
      preLoaderRoute: typeof AppNewRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/app/me': {
      id: '/app/me'
      path: '/me'
      fullPath: '/app/me'
      preLoaderRoute: typeof AppMeRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/app/leaderboard': {
      id: '/app/leaderboard'
      path: '/leaderboard'
      fullPath: '/app/leaderboard'
      preLoaderRoute: typeof AppLeaderboardRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/app/feed': {
      id: '/app/feed'
      path: '/feed'
      fullPath: '/app/feed'
      preLoaderRoute: typeof AppFeedRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/_marketing/leaderboard': {
      id: '/_marketing/leaderboard'
      path: '/leaderboard'
      fullPath: '/leaderboard'
      preLoaderRoute: typeof MarketingLeaderboardRouteImport
      parentRoute: typeof MarketingRouteRoute
    }
    '/_auth/signup': {
      id: '/_auth/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof AuthSignupRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/_auth/login': {
      id: '/_auth/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof AuthRouteRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface AuthRouteRouteChildren {
  AuthLoginRoute: typeof AuthLoginRoute
  AuthSignupRoute: typeof AuthSignupRoute
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthLoginRoute: AuthLoginRoute,
  AuthSignupRoute: AuthSignupRoute,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
)

interface MarketingRouteRouteChildren {
  MarketingLeaderboardRoute: typeof MarketingLeaderboardRoute
  MarketingIndexRoute: typeof MarketingIndexRoute
}

const MarketingRouteRouteChildren: MarketingRouteRouteChildren = {
  MarketingLeaderboardRoute: MarketingLeaderboardRoute,
  MarketingIndexRoute: MarketingIndexRoute,
}

const MarketingRouteRouteWithChildren = MarketingRouteRoute._addFileChildren(
  MarketingRouteRouteChildren,
)

interface AppRouteRouteChildren {
  AppFeedRoute: typeof AppFeedRoute
  AppLeaderboardRoute: typeof AppLeaderboardRoute
  AppMeRoute: typeof AppMeRoute
  AppNewRoute: typeof AppNewRoute
  AppSettingsRoute: typeof AppSettingsRoute
}

const AppRouteRouteChildren: AppRouteRouteChildren = {
  AppFeedRoute: AppFeedRoute,
  AppLeaderboardRoute: AppLeaderboardRoute,
  AppMeRoute: AppMeRoute,
  AppNewRoute: AppNewRoute,
  AppSettingsRoute: AppSettingsRoute,
}

const AppRouteRouteWithChildren = AppRouteRoute._addFileChildren(
  AppRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  AuthRouteRoute: AuthRouteRouteWithChildren,
  MarketingRouteRoute: MarketingRouteRouteWithChildren,
  AppRouteRoute: AppRouteRouteWithChildren,
  UsernameRoute: UsernameRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
