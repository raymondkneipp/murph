/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as DemoRouteRouteImport } from './routes/demo/route'
import { Route as MarketingRouteRouteImport } from './routes/_marketing/route'
import { Route as MarketingIndexRouteImport } from './routes/_marketing/index'
import { Route as DemoTrpcTodoRouteImport } from './routes/demo/trpc-todo'
import { Route as DemoTanstackQueryRouteImport } from './routes/demo/tanstack-query'
import { Route as DemoTableRouteImport } from './routes/demo/table'
import { Route as DemoStartServerFuncsRouteImport } from './routes/demo/start.server-funcs'
import { Route as DemoFormSimpleRouteImport } from './routes/demo/form.simple'
import { Route as DemoFormAddressRouteImport } from './routes/demo/form.address'
import { ServerRoute as ApiDemoTqTodosServerRouteImport } from './routes/api/demo-tq-todos'
import { ServerRoute as ApiTrpcSplatServerRouteImport } from './routes/api/trpc.$'

const rootServerRouteImport = createServerRootRoute()

const DemoRouteRoute = DemoRouteRouteImport.update({
  id: '/demo',
  path: '/demo',
  getParentRoute: () => rootRouteImport,
} as any)
const MarketingRouteRoute = MarketingRouteRouteImport.update({
  id: '/_marketing',
  getParentRoute: () => rootRouteImport,
} as any)
const MarketingIndexRoute = MarketingIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => MarketingRouteRoute,
} as any)
const DemoTrpcTodoRoute = DemoTrpcTodoRouteImport.update({
  id: '/trpc-todo',
  path: '/trpc-todo',
  getParentRoute: () => DemoRouteRoute,
} as any)
const DemoTanstackQueryRoute = DemoTanstackQueryRouteImport.update({
  id: '/tanstack-query',
  path: '/tanstack-query',
  getParentRoute: () => DemoRouteRoute,
} as any)
const DemoTableRoute = DemoTableRouteImport.update({
  id: '/table',
  path: '/table',
  getParentRoute: () => DemoRouteRoute,
} as any)
const DemoStartServerFuncsRoute = DemoStartServerFuncsRouteImport.update({
  id: '/start/server-funcs',
  path: '/start/server-funcs',
  getParentRoute: () => DemoRouteRoute,
} as any)
const DemoFormSimpleRoute = DemoFormSimpleRouteImport.update({
  id: '/form/simple',
  path: '/form/simple',
  getParentRoute: () => DemoRouteRoute,
} as any)
const DemoFormAddressRoute = DemoFormAddressRouteImport.update({
  id: '/form/address',
  path: '/form/address',
  getParentRoute: () => DemoRouteRoute,
} as any)
const ApiDemoTqTodosServerRoute = ApiDemoTqTodosServerRouteImport.update({
  id: '/api/demo-tq-todos',
  path: '/api/demo-tq-todos',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiTrpcSplatServerRoute = ApiTrpcSplatServerRouteImport.update({
  id: '/api/trpc/$',
  path: '/api/trpc/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/demo': typeof DemoRouteRouteWithChildren
  '/demo/table': typeof DemoTableRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/demo/trpc-todo': typeof DemoTrpcTodoRoute
  '/': typeof MarketingIndexRoute
  '/demo/form/address': typeof DemoFormAddressRoute
  '/demo/form/simple': typeof DemoFormSimpleRoute
  '/demo/start/server-funcs': typeof DemoStartServerFuncsRoute
}
export interface FileRoutesByTo {
  '/demo': typeof DemoRouteRouteWithChildren
  '/demo/table': typeof DemoTableRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/demo/trpc-todo': typeof DemoTrpcTodoRoute
  '/': typeof MarketingIndexRoute
  '/demo/form/address': typeof DemoFormAddressRoute
  '/demo/form/simple': typeof DemoFormSimpleRoute
  '/demo/start/server-funcs': typeof DemoStartServerFuncsRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_marketing': typeof MarketingRouteRouteWithChildren
  '/demo': typeof DemoRouteRouteWithChildren
  '/demo/table': typeof DemoTableRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/demo/trpc-todo': typeof DemoTrpcTodoRoute
  '/_marketing/': typeof MarketingIndexRoute
  '/demo/form/address': typeof DemoFormAddressRoute
  '/demo/form/simple': typeof DemoFormSimpleRoute
  '/demo/start/server-funcs': typeof DemoStartServerFuncsRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/demo'
    | '/demo/table'
    | '/demo/tanstack-query'
    | '/demo/trpc-todo'
    | '/'
    | '/demo/form/address'
    | '/demo/form/simple'
    | '/demo/start/server-funcs'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/demo'
    | '/demo/table'
    | '/demo/tanstack-query'
    | '/demo/trpc-todo'
    | '/'
    | '/demo/form/address'
    | '/demo/form/simple'
    | '/demo/start/server-funcs'
  id:
    | '__root__'
    | '/_marketing'
    | '/demo'
    | '/demo/table'
    | '/demo/tanstack-query'
    | '/demo/trpc-todo'
    | '/_marketing/'
    | '/demo/form/address'
    | '/demo/form/simple'
    | '/demo/start/server-funcs'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  MarketingRouteRoute: typeof MarketingRouteRouteWithChildren
  DemoRouteRoute: typeof DemoRouteRouteWithChildren
}
export interface FileServerRoutesByFullPath {
  '/api/demo-tq-todos': typeof ApiDemoTqTodosServerRoute
  '/api/trpc/$': typeof ApiTrpcSplatServerRoute
}
export interface FileServerRoutesByTo {
  '/api/demo-tq-todos': typeof ApiDemoTqTodosServerRoute
  '/api/trpc/$': typeof ApiTrpcSplatServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/demo-tq-todos': typeof ApiDemoTqTodosServerRoute
  '/api/trpc/$': typeof ApiTrpcSplatServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/demo-tq-todos' | '/api/trpc/$'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/demo-tq-todos' | '/api/trpc/$'
  id: '__root__' | '/api/demo-tq-todos' | '/api/trpc/$'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiDemoTqTodosServerRoute: typeof ApiDemoTqTodosServerRoute
  ApiTrpcSplatServerRoute: typeof ApiTrpcSplatServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/demo': {
      id: '/demo'
      path: '/demo'
      fullPath: '/demo'
      preLoaderRoute: typeof DemoRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_marketing': {
      id: '/_marketing'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof MarketingRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_marketing/': {
      id: '/_marketing/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof MarketingIndexRouteImport
      parentRoute: typeof MarketingRouteRoute
    }
    '/demo/trpc-todo': {
      id: '/demo/trpc-todo'
      path: '/trpc-todo'
      fullPath: '/demo/trpc-todo'
      preLoaderRoute: typeof DemoTrpcTodoRouteImport
      parentRoute: typeof DemoRouteRoute
    }
    '/demo/tanstack-query': {
      id: '/demo/tanstack-query'
      path: '/tanstack-query'
      fullPath: '/demo/tanstack-query'
      preLoaderRoute: typeof DemoTanstackQueryRouteImport
      parentRoute: typeof DemoRouteRoute
    }
    '/demo/table': {
      id: '/demo/table'
      path: '/table'
      fullPath: '/demo/table'
      preLoaderRoute: typeof DemoTableRouteImport
      parentRoute: typeof DemoRouteRoute
    }
    '/demo/start/server-funcs': {
      id: '/demo/start/server-funcs'
      path: '/start/server-funcs'
      fullPath: '/demo/start/server-funcs'
      preLoaderRoute: typeof DemoStartServerFuncsRouteImport
      parentRoute: typeof DemoRouteRoute
    }
    '/demo/form/simple': {
      id: '/demo/form/simple'
      path: '/form/simple'
      fullPath: '/demo/form/simple'
      preLoaderRoute: typeof DemoFormSimpleRouteImport
      parentRoute: typeof DemoRouteRoute
    }
    '/demo/form/address': {
      id: '/demo/form/address'
      path: '/form/address'
      fullPath: '/demo/form/address'
      preLoaderRoute: typeof DemoFormAddressRouteImport
      parentRoute: typeof DemoRouteRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/demo-tq-todos': {
      id: '/api/demo-tq-todos'
      path: '/api/demo-tq-todos'
      fullPath: '/api/demo-tq-todos'
      preLoaderRoute: typeof ApiDemoTqTodosServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/trpc/$': {
      id: '/api/trpc/$'
      path: '/api/trpc/$'
      fullPath: '/api/trpc/$'
      preLoaderRoute: typeof ApiTrpcSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface MarketingRouteRouteChildren {
  MarketingIndexRoute: typeof MarketingIndexRoute
}

const MarketingRouteRouteChildren: MarketingRouteRouteChildren = {
  MarketingIndexRoute: MarketingIndexRoute,
}

const MarketingRouteRouteWithChildren = MarketingRouteRoute._addFileChildren(
  MarketingRouteRouteChildren,
)

interface DemoRouteRouteChildren {
  DemoTableRoute: typeof DemoTableRoute
  DemoTanstackQueryRoute: typeof DemoTanstackQueryRoute
  DemoTrpcTodoRoute: typeof DemoTrpcTodoRoute
  DemoFormAddressRoute: typeof DemoFormAddressRoute
  DemoFormSimpleRoute: typeof DemoFormSimpleRoute
  DemoStartServerFuncsRoute: typeof DemoStartServerFuncsRoute
}

const DemoRouteRouteChildren: DemoRouteRouteChildren = {
  DemoTableRoute: DemoTableRoute,
  DemoTanstackQueryRoute: DemoTanstackQueryRoute,
  DemoTrpcTodoRoute: DemoTrpcTodoRoute,
  DemoFormAddressRoute: DemoFormAddressRoute,
  DemoFormSimpleRoute: DemoFormSimpleRoute,
  DemoStartServerFuncsRoute: DemoStartServerFuncsRoute,
}

const DemoRouteRouteWithChildren = DemoRouteRoute._addFileChildren(
  DemoRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  MarketingRouteRoute: MarketingRouteRouteWithChildren,
  DemoRouteRoute: DemoRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiDemoTqTodosServerRoute: ApiDemoTqTodosServerRoute,
  ApiTrpcSplatServerRoute: ApiTrpcSplatServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
