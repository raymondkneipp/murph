/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as UsernameRouteImport } from './routes/$username'
import { Route as DemoRouteRouteImport } from './routes/demo/route'
import { Route as MarketingRouteRouteImport } from './routes/_marketing/route'
import { Route as AuthRouteRouteImport } from './routes/_auth/route'
import { Route as AppRouteRouteImport } from './routes/_app/route'
import { Route as MarketingIndexRouteImport } from './routes/_marketing/index'
import { Route as DemoTableRouteImport } from './routes/demo/table'
import { Route as MarketingLeaderboardRouteImport } from './routes/_marketing/leaderboard'
import { Route as AuthSignupRouteImport } from './routes/_auth/signup'
import { Route as AuthLoginRouteImport } from './routes/_auth/login'
import { Route as AppSettingsRouteImport } from './routes/_app/settings'
import { Route as AppMeRouteImport } from './routes/_app/me'
import { Route as AppFeedRouteImport } from './routes/_app/feed'
import { Route as DemoFormSimpleRouteImport } from './routes/demo/form.simple'
import { Route as DemoFormAddressRouteImport } from './routes/demo/form.address'
import { Route as AppMurphNewRouteImport } from './routes/_app/murph/new'
import { Route as AppMurphMurphIdRouteImport } from './routes/_app/murph/$murphId'
import { ServerRoute as ApiAuthSplatServerRouteImport } from './routes/api/auth/$'

const rootServerRouteImport = createServerRootRoute()

const UsernameRoute = UsernameRouteImport.update({
  id: '/$username',
  path: '/$username',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoRouteRoute = DemoRouteRouteImport.update({
  id: '/demo',
  path: '/demo',
  getParentRoute: () => rootRouteImport,
} as any)
const MarketingRouteRoute = MarketingRouteRouteImport.update({
  id: '/_marketing',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRouteRoute = AuthRouteRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const AppRouteRoute = AppRouteRouteImport.update({
  id: '/_app',
  getParentRoute: () => rootRouteImport,
} as any)
const MarketingIndexRoute = MarketingIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => MarketingRouteRoute,
} as any)
const DemoTableRoute = DemoTableRouteImport.update({
  id: '/table',
  path: '/table',
  getParentRoute: () => DemoRouteRoute,
} as any)
const MarketingLeaderboardRoute = MarketingLeaderboardRouteImport.update({
  id: '/leaderboard',
  path: '/leaderboard',
  getParentRoute: () => MarketingRouteRoute,
} as any)
const AuthSignupRoute = AuthSignupRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AppSettingsRoute = AppSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppMeRoute = AppMeRouteImport.update({
  id: '/me',
  path: '/me',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppFeedRoute = AppFeedRouteImport.update({
  id: '/feed',
  path: '/feed',
  getParentRoute: () => AppRouteRoute,
} as any)
const DemoFormSimpleRoute = DemoFormSimpleRouteImport.update({
  id: '/form/simple',
  path: '/form/simple',
  getParentRoute: () => DemoRouteRoute,
} as any)
const DemoFormAddressRoute = DemoFormAddressRouteImport.update({
  id: '/form/address',
  path: '/form/address',
  getParentRoute: () => DemoRouteRoute,
} as any)
const AppMurphNewRoute = AppMurphNewRouteImport.update({
  id: '/murph/new',
  path: '/murph/new',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppMurphMurphIdRoute = AppMurphMurphIdRouteImport.update({
  id: '/murph/$murphId',
  path: '/murph/$murphId',
  getParentRoute: () => AppRouteRoute,
} as any)
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/demo': typeof DemoRouteRouteWithChildren
  '/$username': typeof UsernameRoute
  '/feed': typeof AppFeedRoute
  '/me': typeof AppMeRoute
  '/settings': typeof AppSettingsRoute
  '/login': typeof AuthLoginRoute
  '/signup': typeof AuthSignupRoute
  '/leaderboard': typeof MarketingLeaderboardRoute
  '/demo/table': typeof DemoTableRoute
  '/': typeof MarketingIndexRoute
  '/murph/$murphId': typeof AppMurphMurphIdRoute
  '/murph/new': typeof AppMurphNewRoute
  '/demo/form/address': typeof DemoFormAddressRoute
  '/demo/form/simple': typeof DemoFormSimpleRoute
}
export interface FileRoutesByTo {
  '/demo': typeof DemoRouteRouteWithChildren
  '/$username': typeof UsernameRoute
  '/feed': typeof AppFeedRoute
  '/me': typeof AppMeRoute
  '/settings': typeof AppSettingsRoute
  '/login': typeof AuthLoginRoute
  '/signup': typeof AuthSignupRoute
  '/leaderboard': typeof MarketingLeaderboardRoute
  '/demo/table': typeof DemoTableRoute
  '/': typeof MarketingIndexRoute
  '/murph/$murphId': typeof AppMurphMurphIdRoute
  '/murph/new': typeof AppMurphNewRoute
  '/demo/form/address': typeof DemoFormAddressRoute
  '/demo/form/simple': typeof DemoFormSimpleRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_app': typeof AppRouteRouteWithChildren
  '/_auth': typeof AuthRouteRouteWithChildren
  '/_marketing': typeof MarketingRouteRouteWithChildren
  '/demo': typeof DemoRouteRouteWithChildren
  '/$username': typeof UsernameRoute
  '/_app/feed': typeof AppFeedRoute
  '/_app/me': typeof AppMeRoute
  '/_app/settings': typeof AppSettingsRoute
  '/_auth/login': typeof AuthLoginRoute
  '/_auth/signup': typeof AuthSignupRoute
  '/_marketing/leaderboard': typeof MarketingLeaderboardRoute
  '/demo/table': typeof DemoTableRoute
  '/_marketing/': typeof MarketingIndexRoute
  '/_app/murph/$murphId': typeof AppMurphMurphIdRoute
  '/_app/murph/new': typeof AppMurphNewRoute
  '/demo/form/address': typeof DemoFormAddressRoute
  '/demo/form/simple': typeof DemoFormSimpleRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/demo'
    | '/$username'
    | '/feed'
    | '/me'
    | '/settings'
    | '/login'
    | '/signup'
    | '/leaderboard'
    | '/demo/table'
    | '/'
    | '/murph/$murphId'
    | '/murph/new'
    | '/demo/form/address'
    | '/demo/form/simple'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/demo'
    | '/$username'
    | '/feed'
    | '/me'
    | '/settings'
    | '/login'
    | '/signup'
    | '/leaderboard'
    | '/demo/table'
    | '/'
    | '/murph/$murphId'
    | '/murph/new'
    | '/demo/form/address'
    | '/demo/form/simple'
  id:
    | '__root__'
    | '/_app'
    | '/_auth'
    | '/_marketing'
    | '/demo'
    | '/$username'
    | '/_app/feed'
    | '/_app/me'
    | '/_app/settings'
    | '/_auth/login'
    | '/_auth/signup'
    | '/_marketing/leaderboard'
    | '/demo/table'
    | '/_marketing/'
    | '/_app/murph/$murphId'
    | '/_app/murph/new'
    | '/demo/form/address'
    | '/demo/form/simple'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AppRouteRoute: typeof AppRouteRouteWithChildren
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
  MarketingRouteRoute: typeof MarketingRouteRouteWithChildren
  DemoRouteRoute: typeof DemoRouteRouteWithChildren
  UsernameRoute: typeof UsernameRoute
}
export interface FileServerRoutesByFullPath {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRoutesByTo {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/auth/$'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/auth/$'
  id: '__root__' | '/api/auth/$'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/$username': {
      id: '/$username'
      path: '/$username'
      fullPath: '/$username'
      preLoaderRoute: typeof UsernameRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo': {
      id: '/demo'
      path: '/demo'
      fullPath: '/demo'
      preLoaderRoute: typeof DemoRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_marketing': {
      id: '/_marketing'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof MarketingRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_marketing/': {
      id: '/_marketing/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof MarketingIndexRouteImport
      parentRoute: typeof MarketingRouteRoute
    }
    '/demo/table': {
      id: '/demo/table'
      path: '/table'
      fullPath: '/demo/table'
      preLoaderRoute: typeof DemoTableRouteImport
      parentRoute: typeof DemoRouteRoute
    }
    '/_marketing/leaderboard': {
      id: '/_marketing/leaderboard'
      path: '/leaderboard'
      fullPath: '/leaderboard'
      preLoaderRoute: typeof MarketingLeaderboardRouteImport
      parentRoute: typeof MarketingRouteRoute
    }
    '/_auth/signup': {
      id: '/_auth/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof AuthSignupRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/_auth/login': {
      id: '/_auth/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/_app/settings': {
      id: '/_app/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof AppSettingsRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/_app/me': {
      id: '/_app/me'
      path: '/me'
      fullPath: '/me'
      preLoaderRoute: typeof AppMeRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/_app/feed': {
      id: '/_app/feed'
      path: '/feed'
      fullPath: '/feed'
      preLoaderRoute: typeof AppFeedRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/demo/form/simple': {
      id: '/demo/form/simple'
      path: '/form/simple'
      fullPath: '/demo/form/simple'
      preLoaderRoute: typeof DemoFormSimpleRouteImport
      parentRoute: typeof DemoRouteRoute
    }
    '/demo/form/address': {
      id: '/demo/form/address'
      path: '/form/address'
      fullPath: '/demo/form/address'
      preLoaderRoute: typeof DemoFormAddressRouteImport
      parentRoute: typeof DemoRouteRoute
    }
    '/_app/murph/new': {
      id: '/_app/murph/new'
      path: '/murph/new'
      fullPath: '/murph/new'
      preLoaderRoute: typeof AppMurphNewRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/_app/murph/$murphId': {
      id: '/_app/murph/$murphId'
      path: '/murph/$murphId'
      fullPath: '/murph/$murphId'
      preLoaderRoute: typeof AppMurphMurphIdRouteImport
      parentRoute: typeof AppRouteRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface AppRouteRouteChildren {
  AppFeedRoute: typeof AppFeedRoute
  AppMeRoute: typeof AppMeRoute
  AppSettingsRoute: typeof AppSettingsRoute
  AppMurphMurphIdRoute: typeof AppMurphMurphIdRoute
  AppMurphNewRoute: typeof AppMurphNewRoute
}

const AppRouteRouteChildren: AppRouteRouteChildren = {
  AppFeedRoute: AppFeedRoute,
  AppMeRoute: AppMeRoute,
  AppSettingsRoute: AppSettingsRoute,
  AppMurphMurphIdRoute: AppMurphMurphIdRoute,
  AppMurphNewRoute: AppMurphNewRoute,
}

const AppRouteRouteWithChildren = AppRouteRoute._addFileChildren(
  AppRouteRouteChildren,
)

interface AuthRouteRouteChildren {
  AuthLoginRoute: typeof AuthLoginRoute
  AuthSignupRoute: typeof AuthSignupRoute
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthLoginRoute: AuthLoginRoute,
  AuthSignupRoute: AuthSignupRoute,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
)

interface MarketingRouteRouteChildren {
  MarketingLeaderboardRoute: typeof MarketingLeaderboardRoute
  MarketingIndexRoute: typeof MarketingIndexRoute
}

const MarketingRouteRouteChildren: MarketingRouteRouteChildren = {
  MarketingLeaderboardRoute: MarketingLeaderboardRoute,
  MarketingIndexRoute: MarketingIndexRoute,
}

const MarketingRouteRouteWithChildren = MarketingRouteRoute._addFileChildren(
  MarketingRouteRouteChildren,
)

interface DemoRouteRouteChildren {
  DemoTableRoute: typeof DemoTableRoute
  DemoFormAddressRoute: typeof DemoFormAddressRoute
  DemoFormSimpleRoute: typeof DemoFormSimpleRoute
}

const DemoRouteRouteChildren: DemoRouteRouteChildren = {
  DemoTableRoute: DemoTableRoute,
  DemoFormAddressRoute: DemoFormAddressRoute,
  DemoFormSimpleRoute: DemoFormSimpleRoute,
}

const DemoRouteRouteWithChildren = DemoRouteRoute._addFileChildren(
  DemoRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  AppRouteRoute: AppRouteRouteWithChildren,
  AuthRouteRoute: AuthRouteRouteWithChildren,
  MarketingRouteRoute: MarketingRouteRouteWithChildren,
  DemoRouteRoute: DemoRouteRouteWithChildren,
  UsernameRoute: UsernameRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
